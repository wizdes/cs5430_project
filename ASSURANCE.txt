Patrick Berens(pcb73)
Matt Goggin(mg343)
Yi Li(yl2326)

ASSURANCE.txt, which describes how and what you tested in the software being submitted. Also describe here any other means you used to increase assurance in the correctness of the system and in the absence of vulnerabilities.

Table of Contents
1) Overview 
2) Unit Test Cases
3) Integration Tests
4) Other Assurance Mechanics
	a) AES Encrypted Local Files with HMACs
	b) Secure Length for PIN Generation
	c) Code Reviews
	d) Class Design	
	e) Network Packet Observation


1) Overview 

For this project, we combined several standard Java implementations of security measures with unit tests and careful code maintenance. 

2) Unit Test Cases

We introduced unit tests for the new functionality introduced into the system.

3) Integration Tests

Although created numerous unit test cases to increase our assurance of the system, we also introduced several Integration Tests to analyze our system from an end-to-end perspective.  

3) Other Assurance Mechanics

There are several other assurance measures that were taken to increase the assurance in the correctness of the system.

a) AES Encrypted Local Files with HMACs

In our system, we did not assume that all elements of a user's operating system are safe. Specifically, we assume that an attacker may be able to gain information from the files on the file system. Because of this, we encrypted all data saved onto the file system with an AES encrpytion key generated from a user defined password. Thus, only users who remember their own passwords are able to access their files.

b) Secure Length for PIN Generation

In our system, we use a PIN to authenticate humans connecting to a server as well as exchanging public/private keys. This PIN needs to be of an adequate length to prevent brute force attacks. The paper in by Melber and Ryberg (http://www.bcs.org/upload/pdf/mobile-computing.pdf) recommends a PIN length of 12; this is the length that is used. 

c) Code Reviews
d) Class Design	
e) Network Packet Observation
