ASSURANCE.txt, which describes how and what you tested in the software being submitted. Also describe here any other means you used to increase assurance in the correctness of the system and in the absence of vulnerabilities.

Table of Contents
1) Overview 
2) Unit Test Cases
3) Other Assurance Mechanics
	a) Sealed Object
	b) SecureRandom
	c) RSA Encryption/Decryption
		i) size of Keys
	d) AES Encryption/Decryption
		i) size of Keys
	e) Nonces
	f) HMACs
	g) Code Reviews
	h) Class Design

1) Overview 

We used a combination of standard Java implementations of security measures as well as unit tests on every package of our system to increase assurance in the correctness of our system.

2) Unit Test Cases

We introduced unit tests for each package of our cryptographic substrate. 

3) Other Assurance Mechanics

There are several other assurance measures that were taken to increase the assurance in the correctness of the system.

a) SealedObject
We used the Java class 'SealedObject' to encapsulate a Java object and encrypt it.
b) SecureRandom
We used the Java class 'SecureRandom' to general random numbers securely.
c) RSA Encryption/Decryption
	We are using the standard Java class KeyPairGenerator with the 'RSA' algorithm. This is initialized with the highest level of SecureRandom (from the Javadocs). It encrypts/decrypts with the 'RSA/ECB/PKCS1Padding' algorithm.
	i) size of Keys
	We are using a 3584 bit RSA keys which support our large authentication messages.
d) AES Encryption/Decryption
e) Nonces
	We are using nonces to ensure the system is not susceptible to replay attacks. The specific protocols in using nonces during machine authentication is detailed in FUNCTIONALITY.txt.
f) HMACs
	We are using HMACs to ensure the integrity of the data we are sending. The HMAC is generated using the standard Java implementation of HMACs and encrypted with the message.
g) Code Reviews
	We used Github's 'Pull Request' feature to code review all commits going into the master branch. This allows us to confirm all changes with the entire team and reduce the number of errors pushed into code.

h) Class Design 
	To reduce programmer error and prevent any leakage of insecure data, we abstracted our system into three layers. The bottom layer is the transport layer which provides basic networking functionality of a multi-client socket architecture, as well as, file operations. It is within this layer that serialization of messages and files occurs. The top layer is the application layer, which runs client applications. It is within this top layer that message and file content construction occurs. 
	The application layer and the transportation layer are separated by the security layer. This layer has functions which accept messages and file contents from the application layer, and packages them into encrypted objects using AES(from password or shared random key) or RSA. This layer also processes messages coming up from the transport layer by unpackaging/decrypting the encrypted messages and sending the plaintext data up to the application. All keys are encapsulated within this layer and aren’t visible outside it. No data can be sent between layers without passing through this secure layer. This provides assurance that all messages and files sent/written are encrypted and no keys leave this layer without first being protected.
