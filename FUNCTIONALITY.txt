Patrick Berens(pcb73)
Matt Goggin(mg343)
Yi Li(yl2326)

FUNCTIONALITY.txt, which should discuss the interface that your system implements. What operations does it export? What is the effect of each operation?

Table of Contents
1) Overview
  a) Confidentality
  b) Integrity
  c) Availability
2) Functionality
  a) Machine Authentication
    i) session key exchange protocol
    ii) message protocol
  b) Human Authentication
    i) SRP
    ii) Password mechanism  
  c) Application layer
    i) Hosting a document
    ii) Joining a document
    iii) MAC
    iv) Configuration
  d) Encryption
    i) SRP 
    ii) AES
    iii) HMACs
  e) Network

1) Overview
This is demonstrate the functionality of our project, SecurEdit. SecurEdit is a secure, colloborative, peer to peer based text editor. In this document, we will go other the machine authentication, human authentication, and human authorization functionalities.

a) Confidentality

All communication between machines are subject to Dolov-Yao attacks. Because of this, we encrypt our messages either with AES session keys or message information in methods such that important information is not revealed (see SRP protocol). Furthermore, our program all encrypted file securely using AES encryption, encrypting all confidential information with an AES cipher that is generated using a key generator on a user generated password. 

b) Integrity

We guarantee the integrity of both the data sent between machines as well as data stored on disk by calculating an HMAC of the unencrypted data before encrypting the the concatenation of the HMAC and the unencrypted data. As mentioned in the online lecture notes "[2/10] Applied Cryptography Notes" under the section (Part 3: Confidentiality and Integrity), the process of 'MAC then Encrypt' is considered safe and guarantees integrity.

c) Availability

We use TCP to address issues of availability that involves dropped or out of order packets. 

2) Functionality

a) Machine Authentication

i) Session key exchange protocol

This is done using the SRP protocol to exchange a session key. See section b) for more information.

ii) Message protocol

The message follows the following protocol. Once both machines have received a session key, they use this to encrypt and send messages between each other.  We plan on using this to implement the following message sending protocol:
A and B are machines.
A is trying to send a message m to B.
K_AB is the shared key of A and B.
HMAC is the hmac of the encrypted object.
c_i is a counter which keeps track of the number of messages which have been seen from user i(this solves our 3 message nonce protocol used previously).

1) A -> B : {A, B}K_AB, HMAC, c_i
2) If c_i > previous_c_i then
	//process application messages
   else
	//Ignore message

b) Human Authentication

This is achieved using the SRP protocol and is done on a per document basis. The initial setup is performed securely using a one-time PIN that is distributed outside the band of our system(by hand or verbally).

i) SRP

The SRP protocol is used to authenticate a human into a machine. 

SRP setup requires the client choose a username and password, computing a salt and a verifier, and finally exhanging s,v securely. The steps are summarized below:
Precondition: Client gives username to server, and server generates a PIN and gives it to the client.
 *    Client                                    Server
 * 1. Client picks password P
 *    x = H(s, P) 
 *    v = g^x                   {s,v}K_PIN -->  Store <C, (s,v)>
 * 2.                           <-- Success               

 The server stores s,v in a map within the document. Then when he encrypts the docuemnt, these values will exist persistantly and safely. Therefore, account creation is done once, but the user can login multiple times as expected.
 
 SRP protocol:
 Summarized below, but essentially user remembers his password and types it in. Owner remembers s,v and authenication is performed and at the end a key is shared.
 * SRP Authentication protocol:
 * Precondition: Server has s,v. Client remembers password P.
 *      Client                                  Server
 *      A = g^a	A
 * 1.                           C, A -->        (lookup s, v)
 *                                              B = k*v + g^b    
 * 2.                           <-- B,u,s
 *      x = H(s, P)   	
 *      S = (B - k*g^x)^(a + ux)                S = (A Â· v^u)^b
 * 	K = H(S)                                K = H(S)
 * 3.	M[1] = H(A, B, K)	M[1] -->	(verify M[1])
 * 4.	(verify M[2])           <-- M[2]	M[2] = H(A, M[1], K)
 * 
 * Postcondition: Client and Server share session key K.
 
ii) Password mechanism  

One important element of the SRP protocol is the selection of a password. To ensure the security of the password, some restrictions are placed. These restrictions are: 
- it must be a alphanumeric password
- it must have both upper and lower case letters
- it must be at least 12 characters long
  
c) Application layer

i) Hosting a document

To host a document, a user simply presses the 'Create Document' button in the main view. This creates a document that allows peers to connect. This is done by having a listening thread that responds to UDP broadcasts for finding LAN documents as well as TCP requests to join the document.

ii) Joining a document

To join a document, a user starts by finding a document to join on (either via manually adding the information or using the UDP broadcast). Next, if user either logs into the document or creates an account to the document if he/she has not done so before. If the user has not logged in before, then the user needs to create an account. This requires a one time PIN exchange to give the document owner the necessary authenication information. Next, the user logs in with his username and his password to gain access to the document.

iii) MAC

The document implements a MAC authorization protocol. Each user has a level, as well as each character in the document. The system is designed such that the document owner is allowed to determine levels for each other. Furthermore, this system implements a 'read-down', 'no read-up', and allows writes only at the same level. Each user is allowed to request to change to a new level.

iv) Configuration

<PATRICK INSERT HERE>

d) Encryption

i) SRP 

<PATRICK INSERT HERE>

ii) AES

We used the standard Java SecureRandom random number generator to create an initialization vector using the 'SHA1PRNG' algorithm and using the 'AES/CBC/PKCS5Padding' algorithm to generate a symmetric AES key with 128 bytes.

iii) HMACs
We used the standard Java MAC class to generate an HMAC of our messages using the 'HmacSHA256' algorithm.

e) Network
The Network layer provides the functionality to send and receive encrypted messages; the actual application interfaces only with a "send" function, to which it passes objects of type application.Message.  These will be subclassed in subsequent phases to send application specific data. The network layer utilizes the SecureTransport package to encrypt messages using either RSA (for initial exchange of the shared session key), or AES (for exchanging messages with the session key).
  