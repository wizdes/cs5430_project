/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package application.encryption_demo;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrick C. Berens
 */
public class EncryptionDemoGUI extends javax.swing.JFrame {
    String appNodeId = "";
    private String appHost = "";
    private int appPort;
    private String username = "";
    private String password = "";
    private boolean nonDefaultSet = false;
    
    private String filename;
    private JFileChooser fileChooser;
    private EncryptionDemoFunctionality functionality;
    
    ArrayList<String> peers = new ArrayList<>();    //temporary until get list custom code working
    /**
     * Creates new form EncryptionDemoGUI
     */
    public EncryptionDemoGUI(String appNodeId, String appHost, int appPort, String password) {
        this.appNodeId = appNodeId;
        this.appHost = appHost;
        this.appPort = appPort;
        this.password = password;
        
        for(int i = 0; i < 3; i++){
            String ident = i + "";
            if(!ident.equals(appNodeId)){
                peers.add(ident);
            }
        }
    }
    private void initAllComponents(){
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        initComponents();
        
        NodeIDTextField.setText(appNodeId);
        HostTextField.setText(appHost);
        PortTextField.setText(appPort + "");
        PasswordTextField.setText(password);
        
        if (nonDefaultSet) {
            functionality = new EncryptionDemoFunctionality(this, appNodeId, password);
        }
        
        SendTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_ENTER) {
                    SendButton.doClick();
                }
            }
        });
        SendChatTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_ENTER) {
                    BroadcastChatButton.doClick();
                }
            }
        });
    }
    public void displayMessages(String plaintext, String ciphertext){
        ReceivedCiphertextTextArea.setText(ReceivedCiphertextTextArea.getText() + ciphertext + "\n");
        DecryptedPlaintextTextArea.setText(DecryptedPlaintextTextArea.getText() + plaintext + "\n");
        ChatWindow.setText(ChatWindow.getText() + plaintext + "\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CryptographyTabbedPane = new javax.swing.JTabbedPane();
        AuthorizationLabel = new javax.swing.JPanel();
        AuthorizeMachineButton = new javax.swing.JButton();
        NodeIDTextField = new javax.swing.JTextField();
        NodeIDLabel = new javax.swing.JLabel();
        HostLabel = new javax.swing.JLabel();
        HostTextField = new javax.swing.JTextField();
        PortLabel = new javax.swing.JLabel();
        PortTextField = new javax.swing.JTextField();
        UpdatePropertiesButton = new javax.swing.JButton();
        UsernameLabel = new javax.swing.JLabel();
        UsernameTextField = new javax.swing.JTextField();
        PasswordLabel = new javax.swing.JLabel();
        PasswordTextField = new javax.swing.JTextField();
        AuthenticateWithLabel = new javax.swing.JLabel();
        AuthenticateWithComboBox = new javax.swing.JComboBox();
        FilePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FileTextArea = new javax.swing.JTextArea();
        OpenFileButton = new javax.swing.JButton();
        EncryptButton = new javax.swing.JButton();
        DecryptButton = new javax.swing.JButton();
        FileLabel = new javax.swing.JLabel();
        SentMessagesPanel = new javax.swing.JPanel();
        SendTextField = new javax.swing.JTextField();
        SendButton = new javax.swing.JButton();
        SentMessagesLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        EnteredPlaintext = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        SentCipherText = new javax.swing.JTextArea();
        EncryptedMessagesLabel = new javax.swing.JLabel();
        PeerComboBox = new javax.swing.JComboBox();
        PeerLabel = new javax.swing.JLabel();
        SentMessagesPanel1 = new javax.swing.JPanel();
        ReceivedCiphertextLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ReceivedCiphertextTextArea = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        DecryptedPlaintextTextArea = new javax.swing.JTextArea();
        DecryptedPlaintextLabel = new javax.swing.JLabel();
        ChatPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ChatWindow = new javax.swing.JTextArea();
        SendChatTextField = new javax.swing.JTextField();
        BroadcastChatButton = new javax.swing.JButton();
        GeneratePINButton = new javax.swing.JButton();
        SendChatButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PeersList = new javax.swing.JList();
        CryptographyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AuthorizeMachineButton.setText("Authorize Machine");
        AuthorizeMachineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorizeMachineButtonActionPerformed(evt);
            }
        });

        NodeIDLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NodeIDLabel.setText("Node ID");

        HostLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        HostLabel.setText("Host");

        PortLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PortLabel.setText("Port");

        UpdatePropertiesButton.setText("Update Properties");
        UpdatePropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePropertiesButtonActionPerformed(evt);
            }
        });

        UsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        UsernameLabel.setText("Username");

        PasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PasswordLabel.setText("Password");

        AuthenticateWithLabel.setText("Authenticate With:");

        AuthenticateWithComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2"}));

        javax.swing.GroupLayout AuthorizationLabelLayout = new javax.swing.GroupLayout(AuthorizationLabel);
        AuthorizationLabel.setLayout(AuthorizationLabelLayout);
        AuthorizationLabelLayout.setHorizontalGroup(
            AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthorizationLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AuthorizationLabelLayout.createSequentialGroup()
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HostLabel)
                            .addComponent(PortLabel)
                            .addComponent(UsernameLabel))
                        .addGap(69, 642, Short.MAX_VALUE))
                    .addGroup(AuthorizationLabelLayout.createSequentialGroup()
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(UpdatePropertiesButton)
                            .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthorizationLabelLayout.createSequentialGroup()
                                    .addComponent(PasswordLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(AuthorizationLabelLayout.createSequentialGroup()
                                    .addComponent(NodeIDLabel)
                                    .addGap(43, 43, 43)
                                    .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(HostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(NodeIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthorizationLabelLayout.createSequentialGroup()
                .addGap(0, 385, Short.MAX_VALUE)
                .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AuthenticateWithLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AuthenticateWithComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addComponent(AuthorizeMachineButton)
                .addGap(35, 35, 35))
        );
        AuthorizationLabelLayout.setVerticalGroup(
            AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthorizationLabelLayout.createSequentialGroup()
                .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AuthorizationLabelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NodeIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NodeIDLabel))
                        .addGap(9, 9, 9)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HostLabel)
                            .addComponent(HostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PortLabel)
                            .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(UsernameLabel)
                            .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordLabel))
                        .addGap(18, 18, 18)
                        .addComponent(UpdatePropertiesButton)
                        .addGap(0, 118, Short.MAX_VALUE))
                    .addGroup(AuthorizationLabelLayout.createSequentialGroup()
                        .addContainerGap(275, Short.MAX_VALUE)
                        .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AuthenticateWithLabel)
                            .addGroup(AuthorizationLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(AuthorizeMachineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AuthenticateWithComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
        );

        CryptographyTabbedPane.addTab("Authorization", AuthorizationLabel);

        FileTextArea.setEditable(false);
        FileTextArea.setColumns(20);
        FileTextArea.setRows(5);
        jScrollPane1.setViewportView(FileTextArea);

        OpenFileButton.setText("Open File");
        OpenFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileButtonActionPerformed(evt);
            }
        });

        EncryptButton.setText("Encrypt");
        EncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptButtonActionPerformed(evt);
            }
        });

        DecryptButton.setText("Decrypt");
        DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptButtonActionPerformed(evt);
            }
        });

        FileLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        FileLabel.setText("File:");

        javax.swing.GroupLayout FilePanelLayout = new javax.swing.GroupLayout(FilePanel);
        FilePanel.setLayout(FilePanelLayout);
        FilePanelLayout.setHorizontalGroup(
            FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FilePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                        .addGroup(FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FilePanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(EncryptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(DecryptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FilePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(OpenFileButton))))
                    .addGroup(FilePanelLayout.createSequentialGroup()
                        .addComponent(FileLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        FilePanelLayout.setVerticalGroup(
            FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilePanelLayout.createSequentialGroup()
                .addComponent(FileLabel)
                .addGap(9, 9, 9)
                .addGroup(FilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FilePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(FilePanelLayout.createSequentialGroup()
                        .addComponent(OpenFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addComponent(EncryptButton)
                        .addGap(18, 18, 18)
                        .addComponent(DecryptButton)
                        .addGap(68, 68, 68))))
        );

        CryptographyTabbedPane.addTab("File", FilePanel);

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        SentMessagesLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SentMessagesLabel.setText("Entered Plaintext");

        EnteredPlaintext.setEditable(false);
        EnteredPlaintext.setColumns(20);
        EnteredPlaintext.setRows(5);
        jScrollPane3.setViewportView(EnteredPlaintext);

        SentCipherText.setEditable(false);
        SentCipherText.setColumns(20);
        SentCipherText.setRows(5);
        jScrollPane4.setViewportView(SentCipherText);

        EncryptedMessagesLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EncryptedMessagesLabel.setText("Sent Ciphertext");

        PeerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2"}));

        PeerLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PeerLabel.setText("Peer");

        javax.swing.GroupLayout SentMessagesPanelLayout = new javax.swing.GroupLayout(SentMessagesPanel);
        SentMessagesPanel.setLayout(SentMessagesPanelLayout);
        SentMessagesPanelLayout.setHorizontalGroup(
            SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SentMessagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                        .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                                .addGap(0, 27, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(SentMessagesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EncryptedMessagesLabel)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                        .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SendTextField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SentMessagesPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(PeerLabel)))
                        .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(SendButton))
                            .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(PeerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(30, 30, 30))
        );
        SentMessagesPanelLayout.setVerticalGroup(
            SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SentMessagesLabel)
                    .addComponent(EncryptedMessagesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SentMessagesPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SendButton)
                            .addComponent(SendTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SentMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PeerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PeerLabel))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        CryptographyTabbedPane.addTab("Sent Messages", SentMessagesPanel);

        ReceivedCiphertextLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ReceivedCiphertextLabel.setText("Received Ciphertext");

        ReceivedCiphertextTextArea.setEditable(false);
        ReceivedCiphertextTextArea.setColumns(20);
        ReceivedCiphertextTextArea.setRows(5);
        jScrollPane5.setViewportView(ReceivedCiphertextTextArea);

        DecryptedPlaintextTextArea.setEditable(false);
        DecryptedPlaintextTextArea.setColumns(20);
        DecryptedPlaintextTextArea.setRows(5);
        jScrollPane6.setViewportView(DecryptedPlaintextTextArea);

        DecryptedPlaintextLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DecryptedPlaintextLabel.setText("Decrypted Plaintext");

        javax.swing.GroupLayout SentMessagesPanel1Layout = new javax.swing.GroupLayout(SentMessagesPanel1);
        SentMessagesPanel1.setLayout(SentMessagesPanel1Layout);
        SentMessagesPanel1Layout.setHorizontalGroup(
            SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SentMessagesPanel1Layout.createSequentialGroup()
                .addGroup(SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SentMessagesPanel1Layout.createSequentialGroup()
                        .addContainerGap(33, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(SentMessagesPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(ReceivedCiphertextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DecryptedPlaintextLabel)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        SentMessagesPanel1Layout.setVerticalGroup(
            SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SentMessagesPanel1Layout.createSequentialGroup()
                .addGroup(SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReceivedCiphertextLabel)
                    .addComponent(DecryptedPlaintextLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SentMessagesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        CryptographyTabbedPane.addTab("Received Messages", SentMessagesPanel1);

        ChatWindow.setEditable(false);
        ChatWindow.setColumns(20);
        ChatWindow.setRows(5);
        jScrollPane7.setViewportView(ChatWindow);

        BroadcastChatButton.setText("Broadcast");
        BroadcastChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BroadcastChatButtonActionPerformed(evt);
            }
        });

        GeneratePINButton.setText("Generate PIN");

        SendChatButton.setText("Send");
        SendChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendChatButtonActionPerformed(evt);
            }
        });

        PeersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "0", "1", "2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        PeersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(PeersList);

        javax.swing.GroupLayout ChatPanelLayout = new javax.swing.GroupLayout(ChatPanel);
        ChatPanel.setLayout(ChatPanelLayout);
        ChatPanelLayout.setHorizontalGroup(
            ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChatPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ChatPanelLayout.createSequentialGroup()
                        .addComponent(SendChatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ChatPanelLayout.createSequentialGroup()
                                .addComponent(BroadcastChatButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SendChatButton)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChatPanelLayout.createSequentialGroup()
                                .addGap(0, 12, Short.MAX_VALUE)
                                .addComponent(GeneratePINButton)
                                .addGap(63, 63, 63))))
                    .addGroup(ChatPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ChatPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(195, Short.MAX_VALUE)))
        );
        ChatPanelLayout.setVerticalGroup(
            ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GeneratePINButton)
                .addGap(29, 29, 29)
                .addGroup(ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SendChatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BroadcastChatButton)
                    .addComponent(SendChatButton))
                .addGap(36, 36, 36))
            .addGroup(ChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ChatPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(111, Short.MAX_VALUE)))
        );

        CryptographyTabbedPane.addTab("Chat", ChatPanel);

        CryptographyLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CryptographyLabel.setText("Cryptography Demonstration");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CryptographyTabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CryptographyLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(CryptographyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CryptographyTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileButtonActionPerformed
        if(functionality == null){
            JOptionPane.showMessageDialog(this, "You must first press button \"Update Properties\"");
            return;
        }
        int ret = fileChooser.showOpenDialog(EncryptionDemoGUI.this);
        if(ret == JFileChooser.APPROVE_OPTION){
            filename = fileChooser.getSelectedFile().getName();
            FileLabel.setText(filename);
            
            String filetext = functionality.openFile(filename);
            FileTextArea.setText(filetext);
        }
    }//GEN-LAST:event_OpenFileButtonActionPerformed

    private void EncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptButtonActionPerformed
        if(functionality == null){
            JOptionPane.showMessageDialog(this, "You must first press button \"Update Properties\"");
            return;
        }
        FileTextArea.setText(functionality.encryptFile(FileTextArea.getText()));
    }//GEN-LAST:event_EncryptButtonActionPerformed

    private void DecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptButtonActionPerformed
        if(functionality == null){
            JOptionPane.showMessageDialog(this, "You must first press button \"Update Properties\"");
            return;
        }
        FileTextArea.setText(functionality.decryptFile(FileTextArea.getText()));
    }//GEN-LAST:event_DecryptButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        if(functionality == null){
            JOptionPane.showMessageDialog(this, "You must first press button \"Update Properties\"");
            return;
        }
        String plaintext = SendTextField.getText();
        String peer = String.valueOf(PeerComboBox.getSelectedItem()).trim();
        
        boolean encryptionAndSendSuccessful = functionality.sendEncryptedMessage(peer, peer + ": " + plaintext);
       
        if(encryptionAndSendSuccessful){
            EnteredPlaintext.setText(EnteredPlaintext.getText() + appNodeId + ": " + plaintext + "\n");
            ChatWindow.setText(ChatWindow.getText() + appNodeId + ": " + plaintext + "\n");
            SentCipherText.setText(SentCipherText.getText() + "Sent encrypted message succesfully" + "\n");
            SendTextField.setText("");
        } else{
            JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and send.");
        }
    }//GEN-LAST:event_SendButtonActionPerformed

    private void UpdatePropertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePropertiesButtonActionPerformed
        appNodeId = NodeIDTextField.getText().trim();
        appHost = HostTextField.getText().trim();
        username = UsernameTextField.getText().trim();
        password = PasswordTextField.getText().trim();
        try{
            appPort = Integer.parseInt(PortTextField.getText());
        } catch(NumberFormatException ex){
            handleException(ex);
        }
        if (!nonDefaultSet) {
            functionality = new EncryptionDemoFunctionality(this, appNodeId, password);
        }
    }//GEN-LAST:event_UpdatePropertiesButtonActionPerformed

    private void AuthorizeMachineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorizeMachineButtonActionPerformed
        if(functionality == null){
            JOptionPane.showMessageDialog(this, "You must first press button \"Update Properties\"");
            return;
        }
        String authResult = functionality.authenticateMachine(String.valueOf(AuthenticateWithComboBox.getSelectedItem()).trim());
        JOptionPane.showMessageDialog(this, authResult);
    }//GEN-LAST:event_AuthorizeMachineButtonActionPerformed

    private void BroadcastChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BroadcastChatButtonActionPerformed
        String plaintext = SendChatTextField.getText();

        //Send message
        boolean encryptionAndSendSuccessful = functionality.broadcastEncryptedMessage(appNodeId + ": " + plaintext);
       
        //Update GUI if message sent successfully
        if(encryptionAndSendSuccessful){
            EnteredPlaintext.setText(EnteredPlaintext.getText() + appNodeId + ": " + plaintext + "\n");
            ChatWindow.setText(ChatWindow.getText() + appNodeId + ": " + plaintext + "\n");
            SentCipherText.setText(SentCipherText.getText() + "Sent encrypted message succesfully" + "\n");
            SendChatTextField.setText("");
        } else{
           JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and broadcast."); 
        }
    }//GEN-LAST:event_BroadcastChatButtonActionPerformed

    private void SendChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendChatButtonActionPerformed
        String plaintext = SendChatTextField.getText();
        String peer = String.valueOf(PeersList.getSelectedValue()).trim();
        
        //Check if a peer is selected
        if(peer == null){
            JOptionPane.showMessageDialog(this, "Please select a peer to send a private message.");
        }
        
        //Trying to send a message to yourself.
        if(peer.equals(appNodeId)){
            JOptionPane.showMessageDialog(this, "You cannot send a private message to yourself. Select another peer.");
        }
        
        //Authenticate Machine if hasn't already been done.
        String authResult = functionality.authenticateMachine(peer);

        //Send message
        boolean encryptionAndSendSuccessful = functionality.sendEncryptedMessage(peer, appNodeId + ": " + plaintext);
       
        //Update GUI if message sent successfully
        if(encryptionAndSendSuccessful){
            EnteredPlaintext.setText(EnteredPlaintext.getText() + appNodeId + ": " + plaintext + "\n");
            ChatWindow.setText(ChatWindow.getText() + appNodeId + ": " + plaintext + "\n");
            SentCipherText.setText(SentCipherText.getText() + "Sent encrypted message succesfully" + "\n");
            SendChatTextField.setText("");
            
        } else{
           JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and send."); 
        }
    }//GEN-LAST:event_SendChatButtonActionPerformed
    private void handleException(Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    public void launchGUI(){        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new EncryptionDemoGUI().setVisible(true);
                initAllComponents();
                setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AuthenticateWithComboBox;
    private javax.swing.JLabel AuthenticateWithLabel;
    private javax.swing.JPanel AuthorizationLabel;
    private javax.swing.JButton AuthorizeMachineButton;
    private javax.swing.JButton BroadcastChatButton;
    private javax.swing.JPanel ChatPanel;
    private javax.swing.JTextArea ChatWindow;
    private javax.swing.JLabel CryptographyLabel;
    private javax.swing.JTabbedPane CryptographyTabbedPane;
    private javax.swing.JButton DecryptButton;
    private javax.swing.JLabel DecryptedPlaintextLabel;
    private javax.swing.JTextArea DecryptedPlaintextTextArea;
    private javax.swing.JButton EncryptButton;
    private javax.swing.JLabel EncryptedMessagesLabel;
    private javax.swing.JTextArea EnteredPlaintext;
    private javax.swing.JLabel FileLabel;
    private javax.swing.JPanel FilePanel;
    private javax.swing.JTextArea FileTextArea;
    private javax.swing.JButton GeneratePINButton;
    private javax.swing.JLabel HostLabel;
    private javax.swing.JTextField HostTextField;
    private javax.swing.JLabel NodeIDLabel;
    private javax.swing.JTextField NodeIDTextField;
    private javax.swing.JButton OpenFileButton;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JTextField PasswordTextField;
    private javax.swing.JComboBox PeerComboBox;
    private javax.swing.JLabel PeerLabel;
    private javax.swing.JList PeersList;
    private javax.swing.JLabel PortLabel;
    private javax.swing.JTextField PortTextField;
    private javax.swing.JLabel ReceivedCiphertextLabel;
    private javax.swing.JTextArea ReceivedCiphertextTextArea;
    private javax.swing.JButton SendButton;
    private javax.swing.JButton SendChatButton;
    private javax.swing.JTextField SendChatTextField;
    private javax.swing.JTextField SendTextField;
    private javax.swing.JTextArea SentCipherText;
    private javax.swing.JLabel SentMessagesLabel;
    private javax.swing.JPanel SentMessagesPanel;
    private javax.swing.JPanel SentMessagesPanel1;
    private javax.swing.JButton UpdatePropertiesButton;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
