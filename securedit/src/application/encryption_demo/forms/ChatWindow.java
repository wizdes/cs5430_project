/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package application.encryption_demo.forms;

import application.encryption_demo.EncryptionDemoFunctionality;
import javax.swing.JOptionPane;

/**
 *
 * @author goggin
 */
public class ChatWindow extends javax.swing.JFrame {
    String appNodeId = "";
    private EncryptionDemoFunctionality functionality;
    boolean isOwner;
    
    /**
     * Creates new form ChatWindow
     */
    public ChatWindow(EncryptionDemoFunctionality functionality, boolean isOwner) {
        this.functionality = functionality;
        this.isOwner = isOwner;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        ChatWindow = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        PeersList = new javax.swing.JList();
        GeneratePINButton = new javax.swing.JButton();
        SendChatTextField = new javax.swing.JTextField();
        BroadcastChatButton = new javax.swing.JButton();
        SendChatButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ChatWindow.setEditable(false);
        ChatWindow.setColumns(20);
        ChatWindow.setRows(5);
        jScrollPane7.setViewportView(ChatWindow);

        PeersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(PeersList);

        GeneratePINButton.setText("Generate PIN");
        GeneratePINButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePINButtonActionPerformed(evt);
            }
        });

        SendChatTextField.setName("enteredPlainText"); // NOI18N

        BroadcastChatButton.setText("Broadcast");
        BroadcastChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BroadcastChatButtonActionPerformed(evt);
            }
        });

        SendChatButton.setText("Send");
        SendChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendChatButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(SendChatTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 518, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 534, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(BroadcastChatButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 51, Short.MAX_VALUE)
                        .add(SendChatButton))
                    .add(layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(GeneratePINButton)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 291, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(GeneratePINButton)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(SendChatTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(BroadcastChatButton)
                    .add(SendChatButton))
                .add(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BroadcastChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BroadcastChatButtonActionPerformed
        String plaintext = SendChatTextField.getText();

        //Send message
        boolean encryptionAndSendSuccessful = functionality.broadcastEncryptedMessage(appNodeId + ": " + plaintext);

        //Update GUI if message sent successfully
        if(encryptionAndSendSuccessful){
            ChatWindow.setText(ChatWindow.getText() + appNodeId + ": " + plaintext + "\n");
            SendChatTextField.setText("");
        } else{
            JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and broadcast.");
        }
    }//GEN-LAST:event_BroadcastChatButtonActionPerformed

    private void SendChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendChatButtonActionPerformed
        String plaintext = SendChatTextField.getText();
        String peer = String.valueOf(PeersList.getSelectedValue()).trim();

        //Check if a peer is selected
        if(peer == null){
            JOptionPane.showMessageDialog(this, "Please select a peer to send a private message.");
        }

        //Trying to send a message to yourself.
        if(peer.equals(appNodeId)){
            JOptionPane.showMessageDialog(this, "You cannot send a private message to yourself. Select another peer.");
        }

        //Authenticate Machine if hasn't already been done.
        String authResult = functionality.authenticateMachine(peer);

        //Send message
        boolean encryptionAndSendSuccessful = functionality.sendEncryptedMessage(peer, appNodeId + ": " + plaintext);

        //Update GUI if message sent successfully
        if(encryptionAndSendSuccessful){
            ChatWindow.setText(ChatWindow.getText() + appNodeId + ": " + plaintext + "\n");
            SendChatTextField.setText("");

        } else{
            JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and send.");
        }
    }//GEN-LAST:event_SendChatButtonActionPerformed

    private void GeneratePINButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePINButtonActionPerformed
        String username = JOptionPane.showInputDialog("Enter the username of the user you wish to generate the PIN for");
        String pin = "123456787654323456";
        JOptionPane.showInputDialog("Here is the PIN for " + username, pin);
    }//GEN-LAST:event_GeneratePINButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BroadcastChatButton;
    private javax.swing.JTextArea ChatWindow;
    private javax.swing.JButton GeneratePINButton;
    private javax.swing.JList PeersList;
    private javax.swing.JButton SendChatButton;
    private javax.swing.JTextField SendChatTextField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
