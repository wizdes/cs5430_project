/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package application.encryption_demo.forms;

import application.encryption_demo.EncryptionDemoFunctionality;
import application.encryption_demo.DiscoveredPeers;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import security_layer.Profile;

/**
 *
 * @author goggin
 */
public class ChatWindow extends javax.swing.JFrame {
    EncryptionDemoFunctionality functionality;
    Profile profile;
    ConcurrentMap<Integer, String> docIDs = new ConcurrentHashMap<>();   //<tab index, docID>
    ConcurrentMap<String, EditPanel> chatPanels = new ConcurrentHashMap<>();    //<docID, chatPanel>
    public static void main(String[] args) {
        String password = "pass0000pass0000";
        
        Profile profile;
        if (new File("0.profile").exists()) {
            profile = Profile.readProfile("0", password);
        } else {
            profile = Profile.createProfile("0", password, 4000, "localhost");
        }
        
        ChatWindow form = new ChatWindow(profile, password);
        form.setVisible(true); 
    }
    
    /**
     * Creates new form ChatWindow
     */
    public ChatWindow(Profile profile, String password) {
        this.profile = profile;
        this.functionality =  new EncryptionDemoFunctionality(this, profile, password);
        initComponents();
        this.setTitle("Chat Window - User: " + profile.ident);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        peerPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        DiscoveredPeersTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        DiscoverPeersButton = new javax.swing.JButton();
        addDefaultPeersButton = new javax.swing.JButton();
        joinChatButton = new javax.swing.JButton();
        startChatButton = new javax.swing.JButton();
        addManualPeer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        peerPanel.setToolTipText("");

        DiscoveredPeersTable.setModel(new DefaultTableModel(new String[]{"ID", "IP", "Port", "Document", "Authenticated"}, 0));
        DiscoveredPeersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(DiscoveredPeersTable);

        DiscoverPeersButton.setText("Discover Peers");
        DiscoverPeersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscoverPeersButtonActionPerformed(evt);
            }
        });

        addDefaultPeersButton.setText("Add Default Peers");
        addDefaultPeersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDefaultPeersButtonActionPerformed(evt);
            }
        });

        joinChatButton.setText("Join Chat");
        joinChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinChatButtonActionPerformed(evt);
            }
        });

        startChatButton.setText("Start Chat");
        startChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startChatButtonActionPerformed(evt);
            }
        });

        addManualPeer.setText("Add Peer Manually");
        addManualPeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addManualPeerActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout peerPanelLayout = new org.jdesktop.layout.GroupLayout(peerPanel);
        peerPanel.setLayout(peerPanelLayout);
        peerPanelLayout.setHorizontalGroup(
            peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(peerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(addDefaultPeersButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 476, Short.MAX_VALUE)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(peerPanelLayout.createSequentialGroup()
                        .add(startChatButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addManualPeer))
                    .add(peerPanelLayout.createSequentialGroup()
                        .add(joinChatButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(DiscoverPeersButton)))
                .addContainerGap())
            .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(peerPanelLayout.createSequentialGroup()
                    .add(11, 11, 11)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .add(12, 12, 12)))
        );
        peerPanelLayout.setVerticalGroup(
            peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, peerPanelLayout.createSequentialGroup()
                .addContainerGap(365, Short.MAX_VALUE)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DiscoverPeersButton)
                    .add(joinChatButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startChatButton)
                    .add(addDefaultPeersButton)
                    .add(addManualPeer))
                .addContainerGap())
            .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(peerPanelLayout.createSequentialGroup()
                    .add(22, 22, 22)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(106, Short.MAX_VALUE)))
        );

        tabbedPane.addTab("Peers", peerPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 830, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 456, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public synchronized void updateDiscoveredPeers(DiscoveredPeers discoveredPeers){
        //Clear table and repopulate it
        ((DefaultTableModel) DiscoveredPeersTable.getModel()).setRowCount(0);
        for (DiscoveredPeers.Peer peer : discoveredPeers.peers.values()) {
            Object[][] rows = peer.getRowRepresentations();
            for (int i = 0; i < rows.length; i++) {
                ((DefaultTableModel) DiscoveredPeersTable.getModel()).addRow(rows[i]);
            }
        }
    }
    
    public void displayMessages(String docID, String plaintext){
        EditPanel panel = chatPanels.get(docID);
        if(panel != null){
            panel.displayMessages(plaintext);
        }
    }    
    
    private void DiscoverPeersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscoverPeersButtonActionPerformed
        functionality.broadcastDiscovery();
    }//GEN-LAST:event_DiscoverPeersButtonActionPerformed

    private void addDefaultPeersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDefaultPeersButtonActionPerformed
        for (int i = 0; i < 3; i++) {
            if (!(i + "").equals(profile.ident)) {
                String id = i + "";
                String host = "localhost";
                int port = 4000 + i;
                ArrayList<String> documents = new ArrayList<>();
                documents.add("Chat");
                functionality.manuallyAddPeer(id, host, port, documents);
            }
        }
    }//GEN-LAST:event_addDefaultPeersButtonActionPerformed

    private void startChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startChatButtonActionPerformed
        
        //Prompt for document name - make sure it is unique
        String docName = "Chat";
        String docID = null;
        while(docID == null){
            String enteredDocName = JOptionPane.showInputDialog("Enter document name", docName);
            if(enteredDocName == null){
                return;
            }
            docName = enteredDocName.trim();
            if(docName.isEmpty()){
                continue;
            }
            
            //docID = this.functionality.createDocumentInstance(profile.ident, docName);
            if(docID == null){
                showMessage("The document name: " + docName + " is already in use.");
            }
        }
        
        //Create a new chat panel
        docIDs.put(this.tabbedPane.getTabCount(), docID);
        this.profile.documentsOpenForDiscovery.add(docName);
        
        EditPanel panel = new EditPanel();
        chatPanels.put(docID, panel);
        this.tabbedPane.add("Owner: " + profile.ident + ", Doc: " + docName, panel);
        this.tabbedPane.setSelectedComponent(panel);
    }//GEN-LAST:event_startChatButtonActionPerformed

    private void joinChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinChatButtonActionPerformed
        //TODO: This needs to be protected with a mutex I think, what if row changes in the middle
        int selectedRow = this.DiscoveredPeersTable.getSelectedRow();
        if(selectedRow < 0) return;
        String ownerId = (String)this.DiscoveredPeersTable.getModel().getValueAt(selectedRow, 0);
        String docName = (String)this.DiscoveredPeersTable.getModel().getValueAt(selectedRow, 3);
        boolean hasAuthenticated = (Boolean)this.DiscoveredPeersTable.getModel().getValueAt(selectedRow, 4);
        
        if (!hasAuthenticated) {
            if (!this.functionality.authenticateHuman(ownerId)) {
                showMessage("Human authentication failed to initialize.");
                return;
            }

            String pin = JOptionPane.showInputDialog("Enter PIN for " + ownerId);
            while (!this.functionality.addPIN(ownerId, pin)) {
                int closed = JOptionPane.showOptionDialog(this,
                        "Bad PIN! or message not received from server",
                        "Bad PIN",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.ERROR_MESSAGE,
                        null,
                        null,
                        null);
                if (closed == JOptionPane.CLOSED_OPTION || closed == JOptionPane.CANCEL_OPTION) {
                    return;
                }
                pin = JOptionPane.showInputDialog("Enter PIN for " + ownerId);
            }
        } else{
            showMessage("Skipping human authentication since already authenticated");
        }
        if (!this.functionality.authenticateMachine(ownerId)) {
            showMessage("machine authentication failed");
            return;
        }
        
        //Create document instance and send join request for doc
        String docID = "YI TODO"; //this.functionality.createDocumentInstance(ownerId, docName);
        docIDs.put(this.tabbedPane.getTabCount(), docID);
        if(!this.functionality.sendJoinRequestMessage(ownerId, docName)){
            showMessage("Join chat request failed to send!");
            return;
        }
        //TODO FINAL PHASE: Authorization: Should wait here for authorization telling me chat request was accepted.
        this.functionality.updateHumanAuthStatus(ownerId, true);
        EditPanel panel = new EditPanel();
        chatPanels.put(docID, panel);
        this.tabbedPane.add("Owner: " + ownerId + ", Doc: " + docName, panel);
        this.tabbedPane.setSelectedComponent(panel);
    }//GEN-LAST:event_joinChatButtonActionPerformed

    private void addManualPeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addManualPeerActionPerformed
        String id = JOptionPane.showInputDialog("Username:");
        if (id == null || id.trim().equals("")) {
            return;
        }
        String host = JOptionPane.showInputDialog("Host:", "localhost");
        if (host == null || host.trim().equals("")) {
            return;
        }        
        int port = 0;
        try {
            port = Integer.parseInt(JOptionPane.showInputDialog("Port:"));
        } catch (java.lang.NumberFormatException e) {
            return;
        }
        String docName = JOptionPane.showInputDialog("Document Name:");
        if (docName == null || docName.trim().equals("")) {
            return;
        }      
        ArrayList<String> documents = new ArrayList<>();
        documents.add(docName);
        functionality.manuallyAddPeer(id.trim(), host.trim(), port, documents);
    }//GEN-LAST:event_addManualPeerActionPerformed

    private void showMessage(String m) {
        JOptionPane.showMessageDialog(this, m);
    }
    
    private void handleException(Exception ex) {
        showMessage(ex.getMessage());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DiscoverPeersButton;
    private javax.swing.JTable DiscoveredPeersTable;
    private javax.swing.JButton addDefaultPeersButton;
    private javax.swing.JButton addManualPeer;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JButton joinChatButton;
    private javax.swing.JPanel peerPanel;
    private javax.swing.JButton startChatButton;
    javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    public void displayPIN(final String ID, final String PIN){
        new PINDisplayDialog(ID, PIN).setVisible(true);
    }
}
