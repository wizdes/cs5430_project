/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package application.encryption_demo.forms;

import application.encryption_demo.EncryptionDemoFunctionality;
import application.encryption_demo.Peers;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import security_layer.Profile;

/**
 *
 * @author goggin
 */
public class ChatWindow extends javax.swing.JFrame {
    private EncryptionDemoFunctionality functionality;
    Profile profile;
    public ArrayList<String> peers = new ArrayList<>();    //temporary until get list custom code working
    
    public static void main(String[] args) {
        String password = "pass0000pass0000";
        
        Profile profile;
        if (new File("0.profile").exists()) {
            profile = Profile.readProfile("0", password);
        } else {
            profile = Profile.writeProfile("0", password, 4000, "localhost");
        }
        
        ChatWindow form = new ChatWindow(profile, password);
        form.setVisible(true); 
    }
    
    /**
     * Creates new form ChatWindow
     */
    public ChatWindow(Profile profile, String password) {
        this.profile = profile;
        this.functionality =  new EncryptionDemoFunctionality(this, profile, password);
        initComponents();
        this.tabbedPane.remove(this.tabbedPane.getComponent(1));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        peerPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        PeersTable = new javax.swing.JTable();
        DiscoverPeersButton = new javax.swing.JButton();
        ManuallyAddPeerButton = new javax.swing.JButton();
        joinChatButton = new javax.swing.JButton();
        startChatButton = new javax.swing.JButton();
        chatPanel = new javax.swing.JPanel();
        SendChatButton = new javax.swing.JButton();
        SendChatTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        PeersList = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        chatWindow = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        peerPanel.setToolTipText("");

        PeersTable.setModel(new DefaultTableModel(new String[]{"ID", "IP", "Port", "Document", "Authenticated"}, 0));
        PeersTable.setColumnSelectionAllowed(true);
        PeersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(PeersTable);

        DiscoverPeersButton.setText("Discover Peers");
        DiscoverPeersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscoverPeersButtonActionPerformed(evt);
            }
        });

        ManuallyAddPeerButton.setText("Manually Add Peer");
        ManuallyAddPeerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManuallyAddPeerButtonActionPerformed(evt);
            }
        });

        joinChatButton.setText("Join Chat");
        joinChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinChatButtonActionPerformed(evt);
            }
        });

        startChatButton.setText("Start Chat");
        startChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startChatButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout peerPanelLayout = new org.jdesktop.layout.GroupLayout(peerPanel);
        peerPanel.setLayout(peerPanelLayout);
        peerPanelLayout.setHorizontalGroup(
            peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(peerPanelLayout.createSequentialGroup()
                .addContainerGap(520, Short.MAX_VALUE)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, peerPanelLayout.createSequentialGroup()
                        .add(startChatButton)
                        .add(18, 18, 18)
                        .add(ManuallyAddPeerButton)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, peerPanelLayout.createSequentialGroup()
                        .add(joinChatButton)
                        .add(33, 33, 33)
                        .add(DiscoverPeersButton)
                        .add(16, 16, 16))))
            .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(peerPanelLayout.createSequentialGroup()
                    .add(11, 11, 11)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                    .add(12, 12, 12)))
        );
        peerPanelLayout.setVerticalGroup(
            peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, peerPanelLayout.createSequentialGroup()
                .addContainerGap(340, Short.MAX_VALUE)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DiscoverPeersButton)
                    .add(joinChatButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ManuallyAddPeerButton)
                    .add(startChatButton))
                .addContainerGap())
            .add(peerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(peerPanelLayout.createSequentialGroup()
                    .add(22, 22, 22)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(88, Short.MAX_VALUE)))
        );

        tabbedPane.addTab("Peers", peerPanel);

        SendChatButton.setText("Send");
        SendChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendChatButtonActionPerformed(evt);
            }
        });

        SendChatTextField.setName("enteredPlainText"); // NOI18N

        PeersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(PeersList);

        chatWindow.setEditable(false);
        chatWindow.setColumns(20);
        chatWindow.setRows(5);
        jScrollPane7.setViewportView(chatWindow);

        org.jdesktop.layout.GroupLayout chatPanelLayout = new org.jdesktop.layout.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(chatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chatPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(SendChatTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 518, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 534, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chatPanelLayout.createSequentialGroup()
                        .add(47, 47, 47)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(chatPanelLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(SendChatButton)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, chatPanelLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .add(chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane7)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 291, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(59, 59, 59)
                .add(chatPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(SendChatTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(SendChatButton))
                .addContainerGap())
        );

        tabbedPane.addTab("Chat", chatPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 830, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 456, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateDiscoveredPeers(Peers peers){
        //Clear table and repopulate it
        ((DefaultTableModel)PeersTable.getModel()).setRowCount(0);
        
        for(Peers.Peer peer: peers.getPeers().values()){
            Object[][] rows = peer.getRowRepresentations();
        
            for(int i = 0; i < rows.length; i++){
                ((DefaultTableModel)PeersTable.getModel()).addRow(rows[i]);
            }
        }
    }
    
    public void displayMessages(String plaintext, String ciphertext){
        chatWindow.setText(chatWindow.getText() + plaintext + "\n");
    }    
    
    private void SendChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendChatButtonActionPerformed
        String plaintext = SendChatTextField.getText();
        String peer = String.valueOf(PeersList.getSelectedValue()).trim();

        //Check if a peer is selected
        if(peer == null){
            JOptionPane.showMessageDialog(this, "Please select a peer to send a private message.");
        }

        //Trying to send a message to yourself.
        if(peer.equals(profile.ident)){
            JOptionPane.showMessageDialog(this, "You cannot send a private message to yourself. Select another peer.");
        }

        //Authenticate Machine if hasn't already been done.
        String authResult = functionality.authenticateMachine(peer);

        //Send message
        boolean encryptionAndSendSuccessful = functionality.sendEncryptedMessage(peer, profile.ident + ": " + plaintext);

        //Update GUI if message sent successfully
        if(encryptionAndSendSuccessful){
            chatWindow.setText(chatWindow.getText() + profile.ident + ": " + plaintext + "\n");
            SendChatTextField.setText("");

        } else{
            JOptionPane.showMessageDialog(this, "Message: \"" +  plaintext + "\" failed to encrypt and send.");
        }
    }//GEN-LAST:event_SendChatButtonActionPerformed

    private void DiscoverPeersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscoverPeersButtonActionPerformed
        // TODO add your handling code here:
        functionality.broadcastDiscovery();
    }//GEN-LAST:event_DiscoverPeersButtonActionPerformed

    private void ManuallyAddPeerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManuallyAddPeerButtonActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < 3; i++) {
            if (!(i + "").equals(profile.ident)) {
                String id = i + "";
                String host = "localhost";
                int port = 4000 + i;
                ArrayList<String> documents = new ArrayList<>();
                documents.add("chat");
                functionality.manuallyAddPeer(id, host, port, documents);        
            }
        }
    }//GEN-LAST:event_ManuallyAddPeerButtonActionPerformed

    private void startChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startChatButtonActionPerformed
        // TODO add your handling code here:
        this.tabbedPane.add("Chat", this.chatPanel);
        this.tabbedPane.setSelectedComponent(this.chatPanel);
    }//GEN-LAST:event_startChatButtonActionPerformed

    private void joinChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinChatButtonActionPerformed
        // TODO add your handling code here:
//        this.tabbedPane.add("Chat", this.chatPanel);
//        this.tabbedPane.setSelectedComponent(this.chatPanel);
        int selectedRow = this.PeersTable.getSelectedRow();
        String peerId = (String)this.PeersTable.getModel().getValueAt(selectedRow, 0);
        System.out.println("join chat with " + peerId);
    }//GEN-LAST:event_joinChatButtonActionPerformed

    private void handleException(Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DiscoverPeersButton;
    private javax.swing.JButton ManuallyAddPeerButton;
    private javax.swing.JList PeersList;
    private javax.swing.JTable PeersTable;
    private javax.swing.JButton SendChatButton;
    private javax.swing.JTextField SendChatTextField;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JTextArea chatWindow;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JButton joinChatButton;
    private javax.swing.JPanel peerPanel;
    private javax.swing.JButton startChatButton;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
